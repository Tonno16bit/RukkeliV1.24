#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

// Wifi network station credentials
#define WIFI_SSID "MC-DONALD"
#define WIFI_PASSWORD "987654321"
// Telegram BOT Token (Get from Botfather)
#define BOT_TOKEN "7234010017:AAEqDTyYSX8saKcSxV685qeQt9s" //(the token would be longer but I cut it short for privacy reasons)
int servonum=0;
const unsigned long BOT_MTBS = 1000; // mean time between scan messages

unsigned long bot_lasttime; // last time messages' scan has been done
WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);

void handleNewMessages(int numNewMessages)
{
  Serial.print("handleNewMessages ");
  Serial.println(numNewMessages);
  
  String answer;
  for (int i = 0; i < numNewMessages; i++)
  {
    telegramMessage &msg = bot.messages[i];
    Serial.println("Received " + msg.text);

    //here I literally gave the user the possibility to select which servo he wants to move
    // and then let him type the angle. because of the fact that the code was done in a rush 
    //I didn't have time to try finding a way to get an integer from any message so I put some
    //basic commands ( as you can see)

    if(msg.text == "s1"){
      servonum=0;
    }
    if(msg.text == "s2"){
      servonum=1;
    }
    if(msg.text == "s3"){
      servonum=2;
    }
    if(msg.text == "s4"){
      servonum=3;
    }
    if(msg.text == "s5"){
      servonum=4;
    }
    if(msg.text == "s6"){
      servonum=5;
    }
    if(msg.text == "s7"){
      servonum=6;
    }
    if(msg.text == "s8"){
      servonum=7;
    }
    if(msg.text == "s9"){
      servonum=8;
    }
    if(msg.text == "s10"){
      servonum=9;
    }
    if(msg.text == "s11"){
      servonum=10;
    }
    if(msg.text == "s12"){
      servonum=11;
    }
    
    if(msg.text == "10"){
      pwm.setPWM(servonum, 0, 175);
    }
    if(msg.text == "20"){
      pwm.setPWM(servonum, 0, 200);
    }
    if(msg.text == "30"){
      pwm.setPWM(servonum, 0, 225);
    }
    if(msg.text == "40"){
      pwm.setPWM(servonum, 0, 250);
    }
    if(msg.text == "50"){
      pwm.setPWM(servonum, 0, 275);
    }
    if(msg.text == "60"){
      pwm.setPWM(servonum, 0, 300);
    }
    if(msg.text == "70"){
      pwm.setPWM(servonum, 0, 325);
    }
    if(msg.text == "80"){
      pwm.setPWM(servonum, 0, 350);
    }
    if(msg.text == "90"){
      pwm.setPWM(servonum, 0, 375);
    }
    if(msg.text == "100"){
      pwm.setPWM(servonum, 0, 400);
    }
    if(msg.text == "110"){
      pwm.setPWM(servonum, 0, 425);
    }
    if(msg.text == "120"){
      pwm.setPWM(servonum, 0, 450);
    }
    if(msg.text == "130"){
      pwm.setPWM(servonum, 0, 475);
    }
    if(msg.text == "140"){
      pwm.setPWM(servonum, 0,500 );
    }
    if(msg.text == "150"){
      pwm.setPWM(servonum, 0,525 );
    }
    if(msg.text == "160"){
      pwm.setPWM(servonum, 0, 550);
    }

    if(msg.text == "20")
    if(msg.text == "30")
    if(msg.text == "40")
    if(msg.text == "50")
    if(msg.text == "60")
    if(msg.text == "0")
    if(msg.text == "10")
    

    bot.sendMessage(msg.chat_id, answer, "Markdown");
  }
}

void bot_setup()
{
  const String commands = F("["
                            "{\"command\":\"help\",  \"description\":\"Get bot usage help\"},"
                            "{\"command\":\"start\", \"description\":\"Message sent when you open a chat with a bot\"},"
                            "{\"command\":\"status\",\"description\":\"Answer device current status\"}" // no comma on last command
                            "]");
  bot.setMyCommands(commands);
  //bot.sendMessage("25235518", "Hola amigo!", "Markdown");
}

void setup()
{
  Serial.begin(115200);
  Serial.println();

  // attempt to connect to Wifi network:
  Serial.print("Connecting to Wifi SSID ");
  Serial.print(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT); // Add root certificate for api.telegram.org
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(500);
  }
  Serial.print("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());

  Serial.print("Retrieving time: ");
  configTime(0, 0, "pool.ntp.org"); // get UTC time via NTP
  time_t now = time(nullptr);
  while (now < 24 * 3600)
  {
    Serial.print(".");
    delay(100);
    now = time(nullptr);
  }
  Serial.println(now);

  bot_setup();
  pwm.begin();
  /*
   * In theory the internal oscillator (clock) is 25MHz but it really isn't
   * that precise. You can 'calibrate' this by tweaking this number until
   * you get the PWM update frequency you're expecting!
   * The int.osc. for the PCA9685 chip is a range between about 23-27MHz and
   * is used for calculating things like writeMicroseconds()
   * Analog servos run at ~50 Hz updates, It is importaint to use an
   * oscilloscope in setting the int.osc frequency for the I2C PCA9685 chip.
   * 1) Attach the oscilloscope to one of the PWM signal pins and ground on
   *    the I2C PCA9685 chip you are setting the value for.
   * 2) Adjust setOscillatorFrequency() until the PWM update frequency is the
   *    expected value (50Hz for most ESCs)
   * Setting the value here is specific to each individual I2C PCA9685 chip and
   * affects the calculations for the PWM update frequency. 
   * Failure to correctly set the int.osc value will cause unexpected PWM results
   */
  pwm.setOscillatorFrequency(27000000);
  pwm.setPWMFreq(50);  // Analog servos run at ~50 Hz updates

  delay(10);
}

void loop()
{
  if (millis() - bot_lasttime > BOT_MTBS)
  {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while (numNewMessages)
    {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }

    bot_lasttime = millis();
  }
}

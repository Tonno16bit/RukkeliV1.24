#include <esp_now.h>
#include <WiFi.h>

/*ESPNOW VARIABLES SECTION*/
// REPLACE WITH YOUR RECEIVER MAC Address
uint8_t broadcastAddress[] = {0x70, 0x04, 0x1D, 0x93, 0x67, 0xD0};
//70:04:1D:93:67:D0

// Structure example to send data
// Must match the receiver structure
typedef struct struct_message {
  int b[16];
} struct_message;

// Create a struct_message called myData
struct_message myData;

esp_now_peer_info_t peerInfo;

/*MULTIPLEXER VARIABLES SECTION*/
const int muxSignalPin = 4;
const int muxS0 = 15;
const int muxS1 = 7;
const int muxS2 = 6;
const int muxS3 = 5;

// callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

// function to read the potentiometer values from the multiplexer
int readPot(int channel) {
  // The channel number (0-15) is represented in binary across four address pins.
  digitalWrite(muxS0, bitRead(channel, 0));
  digitalWrite(muxS1, bitRead(channel, 1));
  digitalWrite(muxS2, bitRead(channel, 2));
  digitalWrite(muxS3, bitRead(channel, 3));
  
  // A short delay allows the multiplexer output to settle.
  delayMicroseconds(5);
  
  // Read and return the analog value from the selected channel
  return analogRead(muxSignalPin);
}


void setup() {
  // Init Serial Monitor
  Serial.begin(115200);
  while(!Serial);
  /*ESPNOW INITIALIZATION SECTION*/
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);
  
  // Register peer
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
  
  // Add peer        
  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Failed to add peer");
    return;
  }
  /*MULTIPLEXER INITIALIZATION SECTION*/
  pinMode(muxS0, OUTPUT);
  pinMode(muxS1, OUTPUT);
  pinMode(muxS2, OUTPUT);
  pinMode(muxS3, OUTPUT);
}
 
void loop() {
  // Set values to send
  for(int i=0;i<16;i++){
    myData.b[i] = readPot(i);
  }
  // Send message via ESP-NOW
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &myData, sizeof(myData));
   
  if (result == ESP_OK) {
    Serial.println("Sent with success");
  }
  else {
    Serial.println("Error sending the data");
  }
  delay(200);
}
